
uniform vec3 camera_position;
uniform vec3 sphere_position;
uniform float sphere_radius_sq;

varying vec3 normal;
varying vec3 position;

varying vec3 override_color;

void main() {
	vec4 direct = gl_ModelViewMatrixInverse * vec4( gl_Vertex.xyz, 0.0 );
	vec3 dir = direct.xyz;

	vec3 to_sphere = camera_position - sphere_position;
	
	float b = dot( to_sphere, dir );
	float c = dot( to_sphere, to_sphere ) - sphere_radius_sq;
	
	float det = b*b - c;
	if( det < 0.0 ) {
		normal = position = vec3( 0.0, 0.0, 0.0 );
		gl_Position = vec4( camera_position+dir*2.0, 1.0 );
	}
	else {
		float t = -b - sqrt( det );
		position = camera_position + dir * t;
		normal = normalize( position - sphere_position );
		gl_Position = vec4( position, 1.0 );		
	}
	
	gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix * gl_Position;
	
}

vec4 walk( vec4 sphere, float r_sq, vec4 hit, vec4 dir ) {
	
	return vec4( 1.0, 0.0, 0.0, 0.0 );

}