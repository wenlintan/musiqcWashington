
uniform vec3 camera_position;
uniform vec3 sphere_position;
uniform float sphere_radius_sq;

uniform vec3 other_spheres[10];
uniform int nspheres;

varying vec3 dir;
//varying vec3 override_color;

void main() {

	vec3 direct = normalize(dir);
	vec3 to_sphere = camera_position - sphere_position;
	
	float b = dot( to_sphere, direct );
	float c = dot( to_sphere, to_sphere ) - 0.04;
	float det = b*b - c;
	
	if( det < 0.0 ) {
		discard;
	}
	
	float t = -b - sqrt(det);
	if( t < 0.0 ) {
		discard;
	}
	
	vec3 position = camera_position + direct * t;
	gl_FragDepth = t / 100.0;
	
	vec3 from_center = position - sphere_position;
	vec3 normal = normalize( from_center );
	
	vec3 light_pos = ( gl_ModelViewMatrixInverse * gl_LightSource[0].position ).xyz;
	vec3 to_light  = light_pos - position;
	float dist_to_light_sq = dot( to_light, to_light );
	to_light = normalize( to_light );
	 
	vec3 light_refl = reflect( -to_light, normal );
	vec3 view_refl  = reflect( direct,    normal );
	
	/*
	vec3 view_refr  = refract( direct, normal, 0.6666 );		//calculate refraction data
	b = dot( from_center, view_refr );
	c = dot( from_center, from_center ) - 0.04;
	t = -b + sqrt( b*b - c );
	vec3 refr_out   = position + view_refr * t;
	vec3 refr_dir   = refract( view_refr, normalize( refr_out - sphere_position ), 1.5 );
	*/
	
	bool visible = true;
	/*
	for( int i = 0; i < nspheres; ++i ) {						//shadowing
		vec3 direct = to_light;
		vec3 to_sphere = position + direct * 0.0001 - other_spheres[i];
		
		float b = dot( to_sphere, direct );
		float c = dot( to_sphere, to_sphere ) - 0.04;
		float det = b*b - c;
		
		if( det < 0.0 )
			continue;
			
		float t = -b - sqrt( det );
		if( t < 0.0 || t*t > dist_to_light_sq )
			continue;
		
		visible = false;
		break;
	}
	*/
	
	float diff_coeff = float(visible) *      max( 0.0, dot( normal,     to_light ) );
	float spec_coeff = float(visible) * pow( max( 0.0, dot( light_refl, -direct  ) ), 20.0 );
	vec4 color = gl_LightSource[0].ambient + gl_LightSource[0].diffuse * diff_coeff + gl_LightSource[0].specular * spec_coeff;
	gl_FragData[0] = vec4( color.rgb, 1.0 );	

	gl_FragData[1] = vec4( position, 1.0 );			//reflection
	gl_FragData[2] = vec4( view_refl, 1.0 );
	//gl_FragData[1] = vec4( refr_out, 1.0 );		//refraction
	//gl_FragData[2] = vec4( refr_dir, 1.0 );

}