
uniform vec3 camera_position;
uniform vec3 verts[3];

varying vec3 normal;
varying vec3 position;

//varying vec3 override_color;

void main() {
	vec4 direct = gl_ModelViewMatrix * vec4( gl_Vertex.xyz, 1.0 );
	vec3 dir = direct.xyz;
	
	normal = position = vec3( 0.0, 0.0, 0.0 );
	gl_Position = vec4( camera_position, 1.0 );
	
	for( int i = 0; i < 3; i+=3 ) {
		vec3 u = verts[i+1] - verts[i], v = verts[i+2] - verts[i], to_tri = verts[i] - camera_position;
		vec3 n = normalize( cross( u, v ) );
		
		float ray_to_norm = dot( dir, n );
		if( abs( ray_to_norm ) < 0.0000001 )
			continue;
			
		float to_tri_to_norm = dot( to_tri, n );
		float t = to_tri_to_norm / ray_to_norm;
		if( t <= 0.0 )
			continue;
		
		vec3 plane = camera_position + dir * t;
		if( dot( cross( u, plane - verts[i] ), n ) < 0.0 )
			continue;
			
		if( dot( cross( verts[i+2] - verts[i+1], plane - verts[i+1] ), n ) < 0.0 )
			continue;
			
		if( dot( cross( -v, plane - verts[i+2] ), n ) < 0.0 )
			continue;
			
		normal = n;
		position = plane;
		gl_Position = vec4( plane, 1.0 );
		break;
	}
	
	gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix * gl_Position;
}