
uniform vec3 sphere_position;
uniform float sphere_radius_sq;

//varying vec3 override_color;

uniform sampler2D positions;
uniform sampler2D normals;

void main() {

	vec4 start = texture2D( positions, gl_TexCoord[0].st );
	vec3 start_pos = start.xyz;
	
	if( abs(start.w) < 0.01 ) {
		discard;
	}
	
	vec3 direct = texture2D( normals, gl_TexCoord[1].st ).xyz;
	vec3 to_sphere = start_pos - sphere_position;
	
	float b = dot( to_sphere, direct );
	float c = dot( to_sphere, to_sphere ) - 0.04;
	float det = b*b - c;
	
	if( det < 0.0 ) {
		discard;
	}
	
	float t = -b - sqrt(det);
	if( t < 0.0 ) {
		discard;
	}
	
	vec3 position = start_pos + direct * t;
	gl_FragDepth = t/100.0;
	vec3 normal = normalize(position - sphere_position);
	
	vec3 light_pos = ( gl_ModelViewMatrixInverse * gl_LightSource[0].position ).xyz;
	vec3 to_light  = normalize( light_pos - position );
	 
	vec3 light_refl = reflect( -to_light, normal );
	vec3 view_refl  = reflect( direct,    normal );
	
	float diff_coeff =      max( 0.0, dot( normal,     to_light ) );
	float spec_coeff = pow( max( 0.0, dot( light_refl, -direct  ) ), 20.0 );
	vec4 color = gl_LightSource[0].ambient + gl_LightSource[0].diffuse * diff_coeff + gl_LightSource[0].specular * spec_coeff;
	gl_FragColor = vec4( color.rgb, 0.6 );
}