#!/usr/bin/env python

try:
    import matplotlib
    matplotlib.use('Agg')
    from matplotlib import pyplot
    plot = True
except ImportError:
    print( "Running without matplotlib" )
    plot = False
    
import numpy as np
import sys

if len( sys.argv ) < 5:
    print( "usage: {0} <data> <nions> <ndark> <out>".format( sys.argv[0] ) )
    sys.exit()

data = np.loadtxt( sys.argv[1] )
nions, ndark = int( sys.argv[2] ), int( sys.argv[3] )

#Assume background calibration is last column in data file
ions = (data[:,1:1+nions] - data[:,1+nions,None]).flatten()
bkg = data[:,-1].flatten()
bkg = bkg - bkg.mean()

threshold = 3*bkg.std()
print( "Threshold:", threshold )

before = (data[:,1:1+nions] - data[:,1+nions,None]) > threshold
after = (data[:,2+nions:2+2*nions] - data[:,-1,None]) > threshold

cur_time, times, flop_data, occs = data[0,0], [], [], []
occurences, shelves = [0]*nions, [0]*nions
for t, b, a in zip( data[:,0], before, after ):
    if t != cur_time:
        times.append( cur_time )
        flop_data.append( [float(s) / o 
            if o else 0 for s, o in zip( shelves, occurences )] )
        occs.append( occurences )

        occurences, shelves = [0]*nions, [0]*nions
        cur_time = t
        
    if b.sum() != nions - ndark:
        #print( "Incorrect number of ions ({0})".format( b.sum() ) )
        continue
        
    for i in range( nions ):
        if b[i]:                occurences[i] += 1
        if b[i] and not a[i]:   shelves[i] += 1
times.append( cur_time )
flop_data.append( [float(s) / o 
    if o else 0 for s, o in zip( shelves, occurences )] )
occs.append( occurences )

if plot:
    fig = pyplot.figure()
    ax = fig.add_subplot(211)
    counts, bins, patches = ax.hist( ions, 30, facecolor='blue', align='left' )
    countsbkg, bins, patches = ax.hist( bkg, bins, facecolor='red', rwidth=0.7, align='mid' )

    ax = fig.add_subplot(212)
    colors = ['r+', 'g+', 'b+']

    args = []
    for i in range( nions ):
        args.append( times )
        args.append( [d[i] for d in flop_data]  )
        args.append( colors[i] )
    
    ax.plot(*args)
    pyplot.savefig( 'analysis' )
    #pyplot.show()
    
output = open( sys.argv[4], "w" )
for t, d, o in zip( times, flop_data, occs ):
    print( "{0}: {1}".format( str(t), ', '.join(
        "{0} (in {1})".format( x, p ) for x,p in zip(d, o) ) ) )
    if not o[0]: continue
    output.write( "{0}\t{1}\t{2}\n".format( t, d[0], o[0] ) )
output.write( "\n\n" )    
for t, d, o in zip( times, flop_data, occs ):
    if not o[1]: continue
    output.write( "{0}\t{1}\t{2}\n".format( t, d[1], o[1] ) )
output.write( "\n\n" )    
for t, d, o in zip( times, flop_data, occs ):
    if not o[2]: continue
    output.write( "{0}\t{1}\t{2}\n".format( t, d[2], o[2] ) )
output.write( "\n\n" )    
output.close()    





