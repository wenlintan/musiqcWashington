#!/usr/bin/env python

import numpy
import numpy.linalg

import scipy.optimize
from sympy import *

from ctypes import *
import argparse
import pickle
import random

from matplotlib import pyplot

amu = 1.6e-27
e = 1.6e-19
oofpez= 9e9
hbar = 1.055e-34

class TrapFrequencies:
    def __init__( self, measured_mass, wx, wy, waxial ):
        self.mass = float(measured_mass)
        self.ws = (wx, wy, waxial)

    def wx( self, mass ):
        scale = (self.mass / mass)
        return self.ws[0] * scale
    def wy( self, mass ):
        scale = (self.mass / mass)
        return self.ws[1] * scale
    def waxial( self, mass ):
        scale = (self.mass / mass) ** 0.5
        return self.ws[2] * scale

    
def radial_freqs( masses, trap_freqs ):
    nions = len( masses )
    wx, wy, waxial = trap_freqs.wx, trap_freqs.wy, trap_freqs.waxial
    zpos = symbols( ' '.join( 'z'+str(i) for i in range(nions) ) )
    axial_trap = sum( m * amu * waxial(m)**2 / 2 * zpos[i]**2 
        for i, m in enumerate( masses ) )
    coulomb = sum( oofpez * e**2 / 2 * sqrt( 1 / (zpos[j] - zpos[k])**2 ) 
        for k in range(1, nions) for j in range(k) )

    eqns = [ diff( axial_trap + coulomb, zpos[i] ) for i in range(nions) ]
    initial = [10e-6 * (i - (nions-1) / 2.0) for i in range(nions)]
    axial_positions = nsolve( eqns, zpos, initial )
    
    xpos = symbols( ' '.join( 'x'+str(i) for i in range(nions) ) )
    ypos = symbols( ' '.join( 'y'+str(i) for i in range(nions) ) )
    radial_trap = sum( 
        m*amu*wx(m)**2 / 2 * xpos[i]**2 + m*amu*wy(m)**2 / 2 * ypos[i]**2
        for i, m in enumerate( masses ) )
    full_coulomb = sum( oofpez * e**2 / 2 * 
        sqrt( 1 / ((xpos[i] - xpos[j])**2 + (ypos[i] - ypos[j])**2 +
            (zpos[i] - zpos[j])**2) )
        for j in range(1, nions) for i in range(j) )

    rpos = xpos + ypos
    Vx = numpy.array([[ 
        ( diff( diff(1 / sqrt( amu*masses[i] * amu*masses[j] ) * 
        (axial_trap + radial_trap + full_coulomb), xpos[i]), xpos[j] )
        .subs( zip( rpos, [0.0]*2*nions ) )
        .subs( zip( zpos, axial_positions ) )).evalf()
        for j in range(nions)] for i in range(nions)], dtype=numpy.float64)
    wsx, vsx = numpy.linalg.eig( Vx )
    wsx = numpy.sqrt( wsx )

    Vy = numpy.array([[ 
        ( diff( diff(1 / sqrt( amu*masses[i] * amu*masses[j] ) * 
        (axial_trap + radial_trap + full_coulomb), ypos[i]), ypos[j] )
        .subs( zip( rpos, [0.0]*2*nions ) )
        .subs( zip( zpos, axial_positions ) )).evalf()
        for j in range(nions)] for i in range(nions)], dtype=numpy.float64)
    wsy, vsy = numpy.linalg.eig( Vy )
    wsy = numpy.sqrt( wsy )

    return (numpy.concatenate( (wsx, wsy), axis=0 ), 
        numpy.concatenate( (vsx, vsy), axis=1 ))

def radial_scan( masses, trap_freqs, exptime, width, rabi_freqs, nbars, freqs ):
    nions = len(masses)
    ws, vs = radial_freqs( masses, trap_freqs )

    output = []
    for i in range( nions ):
        shelves = []
        m, r = masses[i], rabi_freqs[i]
        for f in freqs:
            res = 0.0
            for j, n, w in zip( range(2*nions), nbars, ws ):
                v = vs[i,j]
                eta = numpy.sqrt( hbar / 2 / m / amu / w ) * 2 * numpy.pi / \
                    1.762e-6 / numpy.sqrt(2) * v
            
                res += (0.25 * r ** 2 * eta ** 2 * n * exptime ** 2 * 
                    numpy.sin( (f-w)/width ) ** 2 /
                    ((f-w)/width) ** 2)
            shelves.append( res )
        output.append( numpy.array(shelves) )
    return output

def rabi_flop( masses, trap_freqs, s, rabi_freqs, nbars, times ):
    "Generate theoretical rabi flop for fitting."
    nions = len(masses)
    ws, vs = radial_freqs( masses, trap_freqs )

    masses = masses * amu
    c_masses = masses.ctypes.data_as( POINTER(c_double) )
    c_rabis = rabi_freqs.ctypes.data_as( POINTER(c_double) )

    c_ws = ws.ctypes.data_as( POINTER(c_double) )
    c_vs = vs.ctypes.data_as( POINTER(c_double) )
    c_nbars = nbars.ctypes.data_as( POINTER(c_double) )
    c_times = times.ctypes.data_as( POINTER(c_double) )

    result = numpy.zeros( (nions, len(times)), dtype=numpy.float64 )
    c_result = result.ctypes.data_as( POINTER(c_double) )

    rabi_flop = cdll.LoadLibrary( 'rabi_flop.dll' )
    rabi_flop.rabi_flop( c_size_t(nions), c_size_t(len(times)), c_double(s),
        c_masses, c_rabis, c_ws, c_vs, c_nbars, c_times, c_result
        )
    return result

    output = []
    random.seed()
    for i in range( nions ):
        shelves = []
        m, r = masses[i], rabi_freqs[i]
        etas = [ numpy.sqrt( hbar / 2 / m / amu / w ) * 2 * numpy.pi / 
            1.762e-6 / numpy.sqrt(2) for w in ws ]

        for t in times:
            totalprob, res = 0.0, 0.0
            nsamples = 1000
            for sample in range( nsamples ):
                ns = [ random.randint(0, 1000) for i in range(2*nions) ]
                prob, freq = 1.0, 1.0
                for j, n, nb, eta in zip( range(2*nions), ns, nbars, etas ):
                    v = vs[i,j]
                    prob *= 1 / (float(nb)+1) * (float(nb) / (nb+1))**n
                    freq -= eta**2 * v**2 * n
                totalprob += prob
                res += prob * numpy.cos( 2*r*freq*t )   
            res /= totalprob
            shelves.append( s * (1 - res) )
        output.append( numpy.array(shelves) )
    return output


def fit_scan( fitparamfile, filename, carrier_freq, exptime, trap_freqs ):
    "Fit shelving data from a radial scan to chain modes"
    data = numpy.loadtxt( filename )
    nions = int( (len( data[0] ) - 1) / 2 )
    bright = list( x != 0 for x in data[0, 1+nions:] )
    masses = list( 138 if b else 174 for b in bright )

    rabi_freqs = [2*numpy.pi*30e3]*nions
    freqs = (data[:,0] - carrier_freq) * 2*numpy.pi*1e6
    shelves = [data[:,1+i] for i in range(nions) if bright[i]]

    width = 2*numpy.pi*20e3
    initial = [trap_freqs.ws[0], trap_freqs.ws[1], trap_freqs.ws[2], width]
    initial.extend( [0.5] * 2 * nions )

    def fit_fn( params ):
        "Error function for fitting."
        wx, wy, wz, width = params[:4]
        strengths = params[4:]

        tfreqs = TrapFrequencies( trap_freqs.mass, wx, wy, wz )
        theory = radial_scan( masses, tfreqs, exptime, width, 
            rabi_freqs, strengths, freqs )
        tshelves = [t for i, t in enumerate( theory ) if bright[i]]

        err = []
        for s, t in zip( shelves, tshelves ):
            err = numpy.concatenate( (err, s - t) )
        print( "Error: {}".format( (err**2).sum( axis=0 ) ) )
        return err

    params, _ = scipy.optimize.leastsq( fit_fn, initial, ftol=1e-4 )
    print( "Final params: {}".format( params ) )

    wx, wy, wz, width = params[:4]
    strengths = params[4:]

    tfreqs = TrapFrequencies( trap_freqs.mass, wx, wy, wz )
    theoryfreqs = numpy.arange( min(freqs), max(freqs), 2*numpy.pi*1e3 )
    theory = radial_scan( masses, tfreqs, exptime, width, 
        rabi_freqs, strengths, theoryfreqs )

    storedinfo = [params, freqs, data, theoryfreqs, theory] 
    outfile = open(fitparamfile, 'wb')
    pickle.dump(storedinfo, outfile)
    outfile.close()

def fit_rabi( fitparamfile, filename, trap_freqs ):
    "Fit shelving data to rabi frequencies."
    data = numpy.loadtxt( filename, dtype=numpy.float64 )
    nions = int( (len( data[0] ) - 1) / 2 )
    bright = numpy.array( list( x != 0 for x in data[0, 1+nions:] ) )
    masses = numpy.array( list( 138 if b else 174 for b in bright ), 
            dtype=numpy.float64 )

    rabi_freqs = [0.08e6, 0.11e6, 0.12e6, 0.12e6, 0.11e6, 0.08e6]
    times = data[:,0] * 1e-6
    shelves = [data[:,1+i] for i in range(nions) if bright[i]]

    initial = [0.45, 200.]
    initial.extend( [r for i, r in enumerate(rabi_freqs) if bright[i]] )

    def fit_fn( params ):
        "Error function for fitting."
        s = params[0]
        nbar = params[1]
        riter = iter( params[2:] )
        rabis = [ next(riter) if bright[i] else 0.0 for i in range(nions) ]
        rabis = numpy.array( rabis, dtype=numpy.float64 )
        nbars = numpy.array( [nbar] * 2 * nions, dtype=numpy.float64)

        theory = rabi_flop( masses, trap_freqs, s, rabis, nbars, times )
        tshelves = [t for i, t in enumerate( theory ) if bright[i]]

        err = []
        for s, t in zip( shelves, tshelves ):
            err = numpy.concatenate( (err, s - t) )
        print( "Error: {}".format( (err**2).sum( axis=0 ) ) )
        return err

    params,  _ = scipy.optimize.leastsq( fit_fn, initial, ftol=1e-4 )
    print( "Final params: {}".format( params ) )

    s = params[0]
    nbar = params[1]
    riter = iter( params[2:] )
    rabis = [ next(riter) if bright[i] else 0.0 for i in range(nions) ]
    rabis = numpy.array( rabis, dtype=numpy.float64 )
    nbars = numpy.array( [nbar] * 2 * nions, dtype=numpy.float64)

    theorytimes = numpy.arange( min(times), max(times), 1e-6 )
    theory = rabi_flop( masses, trap_freqs, s, rabis, nbars, theorytimes )
    #pyplot.plot( theorytimes, theory[0] )
    #pyplot.show()
    
    storedinfo = [params, times, data, theorytimes, theory] 
    outfile = open(fitparamfile, 'wb')
    pickle.dump(storedinfo, outfile)
    outfile.close()

def fit( fitparamfile, rabifilename, freqfilename, 
        carrier_freq, exptime, trap_freqs ):

    rabidata = numpy.loadtxt( rabifilename )
    freqdata = numpy.loadtxt( freqfilename )
    nions = int( (len( rabidata[0] ) - 1) / 2 )
    bright = numpy.array( list( x != 0 for x in rabidata[0, 1+nions:] ) )
    masses = numpy.array( list( 138 if b else 174 for b in bright ), 
            dtype=numpy.float64 )

    times = rabidata[:,0] * 1e-6
    freqs = (freqdata[:,0] - carrier_freq) * 2*numpy.pi*1e6
    rabishelves = [rabidata[:,1+i] for i in range(nions) if bright[i]]
    freqshelves = [freqdata[:,1+i] for i in range(nions) if bright[i]]

    width = 2*numpy.pi*20e3
    rabi_freqs = [0.07e6, 0.10e6, 0.11e6, 0.11e6, 0.10e6, 0.07e6]
    initial = [trap_freqs.ws[0], trap_freqs.ws[1], trap_freqs.ws[2], width,
            0.45, exptime]
    initial.extend( [50.] * 2 * nions )
    initial.extend( [r for i, r in enumerate(rabi_freqs) if bright[i]] )

    def fit_fn( params ):
        "Error function for fitting."
        wx, wy, wz, width, s, exptime = params[:6]
        nbars = params[6:6+2*nions]
        riter = iter( params[6+2*nions:] )
        rabis = [ next(riter) if bright[i] else 0.0 for i in range(nions) ]
        rabis = numpy.array( rabis, dtype=numpy.float64 )
        nbars = numpy.array( nbars, dtype=numpy.float64)

        tfreqs = TrapFrequencies( trap_freqs.mass, wx, wy, wz )
        rabitheory = rabi_flop( masses, tfreqs, s, rabis, nbars, times )
        freqtheory = radial_scan( masses, tfreqs, exptime, width, 
            rabis, nbars, freqs )
        rabitshelves = [t for i, t in enumerate( rabitheory ) if bright[i]]
        freqtshelves = [t for i, t in enumerate( freqtheory ) if bright[i]]

        err = []
        for s, t in zip( rabishelves, rabitshelves ):
            err = numpy.concatenate( (err, s - t) )
        for s, t in zip( freqshelves, freqtshelves ):
            err = numpy.concatenate( (err, s - t) )
        print( "Error: {}".format( (err**2).sum( axis=0 ) ) )
        return err

    params, _ = scipy.optimize.leastsq( fit_fn, initial, ftol=1e-4 )
    print( "Final params: {}".format( params ) )

    wx, wy, wz, width, s, exptime = params[:6]
    nbars = params[6:6+2*nions]
    riter = iter( params[6+2*nions:] )
    rabis = [ next(riter) if bright[i] else 0.0 for i in range(nions) ]
    rabis = numpy.array( rabis, dtype=numpy.float64 )
    nbars = numpy.array( nbars, dtype=numpy.float64)

    tfreqs = TrapFrequencies( trap_freqs.mass, wx, wy, wz )
    rabitheory = rabi_flop( masses, tfreqs, s, rabis, nbars, times )
    freqtheory = radial_scan( masses, tfreqs, exptime, width, 
        rabis, nbars, freqs )

    tfreqs = TrapFrequencies( trap_freqs.mass, wx, wy, wz )
    theorytimes = numpy.arange( min(times), max(times), 1e-6 )
    theoryfreqs = numpy.arange( min(freqs), max(freqs), 2*numpy.pi*1e3 )
    rabitheory = rabi_flop( masses, tfreqs, s, rabis, nbars, theorytimes )
    freqtheory = radial_scan( masses, tfreqs, exptime, width, 
        rabis, nbars, theoryfreqs )

    storedinfo = [params, freqs, freqdata, theoryfreqs, freqtheory,
            times, rabidata, theorytimes, rabitheory] 
    outfile = open(fitparamfile, 'wb')
    pickle.dump(storedinfo, outfile)
    outfile.close()

def draw_plot(storeddata):
    "Plot previously fit data."
    fitfile = open(storeddata, 'rb')
    opendata = pickle.load(fitfile)
    fitfile.close()

    params = opendata[0]
    freqs = opendata[1]
    freqdata = opendata[2]
    theoryfreqs = opendata[3]
    freqtheory = opendata[4]
    times = opendata[5]
    rabidata = opendata[6]
    theorytimes = opendata[7]
    rabitheory = opendata[8]

    nions = len( freqtheory )
    freqs = freqs / 2 / numpy.pi / 1e6
    theoryfreqs = theoryfreqs / 2 / numpy.pi / 1e6
    times = times * 1e6
    theorytimes = theorytimes * 1e6

    bright = list( x!=0 for x in freqdata[0,1+nions:] )
    conf = ''.join( "B" if b else "Y" for b in bright )
    masses = numpy.array( list( 138 if b else 174 for b in bright ), 
            dtype=numpy.float64 )

    wx, wy, wz, width, s, exptime = params[:6]
    nbars = params[6:6+2*nions]
    riter = iter( params[6+2*nions:] )
    rabis = [ next(riter) if bright[i] else 0.0 for i in range(nions) ]
    rabis = numpy.array( rabis, dtype=numpy.float64 )
    nbars = numpy.array( nbars, dtype=numpy.float64)

    print( "Trap frequencies: {}, {}, {}".format(
        wx / 2 / numpy.pi / 1e6, wy / 2 / numpy.pi / 1e6, 
        wz / 2 / numpy.pi / 1e6 ) )
    print( "Shelving efficiency: {}".format( s ) )
    print( "Radial line width: {}".format( width / 2 / numpy.pi / 1e6 ) )
    print( "Rabi frequencies: {}".format(
        ', '.join( str(r) for r in rabis ) ) )
    print( "NBars: {}".format(
        ', '.join( str(n) for n in nbars ) ) )


    trap_freqs = TrapFrequencies( 138, wx, wy, wz )
    ws, vs = radial_freqs( masses, trap_freqs )

    pyplot.subplot(211)
    space = 0.0
    colors = ['r', 'g', 'b', 'c', 'm', 'y', 'k']
    for i, b, c in zip( range( nions ), bright, colors ):
        if not b: continue
        d = rabidata[:,1+i]
        n = rabidata[:,1+nions+i]
        e = numpy.sqrt( (d + 1e-6)*(1-d+1e-6)/n )
        pyplot.errorbar( times, d + i*space, 
                yerr=e, fmt=c+'+', markersize=12 )
        pyplot.plot( theorytimes, rabitheory[i] + i*space, c )
    pyplot.yticks( [] )
    pyplot.xlabel( "1762nm Laser Exposure Time (us)" )
    pyplot.title( "Rabi Flop on 1 Yb and 5 Ba ions ({})".format(conf) )
    pyplot.ylim( (-0.0, 1.0) )
    pyplot.xlim( (0, 120) )


    pyplot.subplot(212)
    space = 0.5
    colors = ['r', 'g', 'b', 'c', 'm', 'y', 'k']
    for i, b, c in zip( range( nions ), bright, colors ):
        if not b: continue
        d = freqdata[:,1+i]
        n = freqdata[:,1+nions+i]
        e = numpy.sqrt( (d + 1e-6)*(1-d+1e-6)/n )
        pyplot.errorbar( freqs, d + i*space, 
                yerr=e, fmt=c+'+', markersize=12 )
        pyplot.plot( theoryfreqs, freqtheory[i] + i*space, c )
    pyplot.yticks( [] )
    pyplot.xlabel( "1762nm Laser Carrier Offset (MHz)" )
    pyplot.title( "Radial Modes of 1 Yb and 5 Ba ions ({})".format(conf) )
    pyplot.ylim( (-0.1, 3.0) )
    pyplot.xlim( (0.8, 1.3) )

    for ion, nbar, w in zip( range(2*nions), nbars, ws ):
        bestion = max( (v**2, i) for i, v in enumerate( vs[:,ion] )
            if bright[i % nions] )[1]
        pyplot.annotate( str(int(nbar)), 
            (w / 2 / numpy.pi / 1e6, bestion*space + 0.25),
            xytext=(-20, 10), textcoords='offset points',
            arrowprops=dict(arrowstyle="->",
                connectionstyle="arc3,rad=.2") )
    pyplot.show()


if __name__ == "__main__":
    #radial_scan( [174, 138, 138, 138, 138, 138], 
        #TrapFrequencies( 138, 2*pi*1.3e6, 2*pi*1.3e6, 2*pi*0.14e6 ), 
        #0.0, [], [] )

    parser = argparse.ArgumentParser(description='Normal Mode Fits & Plotting')
    parser.add_argument('-fit', nargs = 4, help = 'Do Fit, save to file. Params: Fit Filename, wx, wy, wz (MHz)')
    parser.add_argument('-plot', nargs = 1, help = 'Plot Theory and data. Param: Fit filename')
    parser.add_argument('rabi', help='Raw data to be fitted/plotted')
    parser.add_argument('freq', help='Raw data to be fitted/plotted')

    args = parser.parse_args()
    carrier_freq = 84.7

    if args.fit:
        args.fit[1:] = map(lambda x: 2*numpy.pi*x*1e6, map(float,args.fit[1:]))
        fitparamfile = args.fit[0]
        fit( fitparamfile, args.rabi, args.freq, carrier_freq, 200e-6,
                TrapFrequencies(138, args.fit[1], args.fit[2], args.fit[3]))

    if args.plot:
        draw_plot(args.plot[0])

#    fit_scan( "YBBBBBtmp.txt", 84.7, [174, 138, 138, 138, 138, 138], 
#        TrapFrequencies( 138, 2*numpy.pi*1.23e6, 2*numpy.pi*1.13e6, 2*numpy.pi*0.14e6 ) )

